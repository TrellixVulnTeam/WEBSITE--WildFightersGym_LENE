/*Utility classes are meant to do only one thing, and do it well. They are designed to be simple,
 composable and re-usable, allowing for easy and fast development. While a CSS system based on utility 
 classes alone is not desirable, having a set of utility classes that allow you to quickly put together 
 templates is great.

 https://blog.mariano.io/css-utility-classes-how-to-use-them-effectively-d61ee00dad2d
 
Common Use Cases
*I find utility classes really helpful for:
*Margin/padding
*Text (colors, size, styles)
*Common Background Colors
*Hiding/Showing stuff
*Display (block, inline-block)

Naming utility classes
To separate utility classes from component classes, itâ€™s good to namespace them. I use the .u- namespace.
You can also shorthand most properties for faster coding. Here are a couple I use:
*p/m for margin/padding
*t/r/l/b for top/right/left/bottom
*v/h for vertical/horizontal
*bg for background
*/


//IMAGE-BANNER
.image-banner {
  height: 40vh;
  background-attachment: fixed;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: contain;

  @include respond(b-phone) {
    height: 60vh;
  }
}


//on-scroll-fixed
/*.sticky {
  position: fixed;
  top: 0%;
  width: 100%;
  z-index: 1000;
}*/


.wd-80{
 width: 100%;
 @include respond(tab-port) {
   width: 80%;
 }
}



//responsive-video{
 .video-container {
   overflow: hidden;
   position: relative;
   width:100%;
   &::after {
       padding-top: 56.25%;
       display: block;
       content: '';
   }
   iframe {
       position: absolute;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
   }

}


//flex-direction-reverse
.flex-reverse-column {
 @include respond(b-phone) {
   flex-direction: column-reverse;
 }
}

.p-intro::first-letter{
 font-size: 10rem;
 display: block;
 float: left;
 line-height: 0.5;
 margin: 1.5rem 1.5rem 1rem 0;
}


//RESPONSIVE IMAGE
.repsonsive-image {
  width: 100% !important;
  height: auto !important;
}

.responsive-image-verticale {
  height: 100% !important;
  width: auto !important;
  max-width: 30rem;
}

//OVERLAY
.overlay {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: #000000ec;
  opacity: 0.5;
  z-index: 3;
}

//NAV JS CLASSES
.sticky {
  position: fixed !important;
  top: 0;
  height: 6rem;
  .navbar {
    border-top-left-radius: 0rem !important;
    border-top-right-radius: 0rem !important;
    border-bottom-left-radius: 1rem;
    border-bottom-right-radius: 1rem;
  }
}
 /*
.active {
  // background-color: red!important;
  color: black !important;
  font-weight: bold;
  text-decoration: underline #f6f09d;
}
*/

//IOS FIXED BACKGROUND
.bg-wrap {
  clip: rect(0, auto, auto, 0);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.bg {
  position: fixed;
  //display: block;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: contain;
  background-repeat: no-repeat;
  transform: translateZ(0);
  will-change: transform;
  z-index: 0;
  background-position: center top;
  overflow: hidden;
}

//HTML
/*  <div class="bg-wrap">
        <div class="bg" style="background-image: url('./images/header-bg-main.jpg'); overflow: hidden;"></div>
      </div>
  */

//BOOTSTRAP
//modal
/*
  .modal-backdrop.show{
    z-index: 2 !important;
  }
  .modal.show .modal-dialog {
    margin-top: 7rem !important;
  }
  */
